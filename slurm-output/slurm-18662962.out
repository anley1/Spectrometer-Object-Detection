2021-05-24 11:40:06,426 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.10 (default, Feb 26 2021, 18:47:35) [GCC 7.3.0]
CUDA available: True
GPU 0: Tesla V100-PCIE-16GB
CUDA_HOME: /usr/local/cuda/10.1/
NVCC: Cuda compilation tools, release 10.1, V10.1.105
GCC: gcc (GCC) 5.4.0
PyTorch: 1.6.0+cu101
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2019.0.5 Product Build 20190808 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.5.0 (Git Hash e2ac1fac44c5078ca927cb9b90e1b3066a0b2ed0)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.3
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, 

TorchVision: 0.7.0+cu101
OpenCV: 4.5.2
MMCV: 1.2.7
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 10.1
MMDetection: 2.11.0+515b289
------------------------------------------------------------

2021-05-24 11:40:09,513 - mmdet - INFO - Distributed training: False
2021-05-24 11:40:12,604 - mmdet - INFO - Config:
model = dict(
    type='CascadeRCNN',
    pretrained='pretrained/swin_base_patch4_window12_384_22k.pth',
    backbone=dict(
        type='SwinTransformer',
        embed_dim=128,
        depths=[2, 2, 18, 2],
        num_heads=[4, 8, 16, 32],
        window_size=7,
        mlp_ratio=4.0,
        qkv_bias=True,
        qk_scale=None,
        drop_rate=0.0,
        attn_drop_rate=0.0,
        drop_path_rate=0.3,
        ape=False,
        patch_norm=True,
        out_indices=(0, 1, 2, 3),
        use_checkpoint=False),
    neck=dict(
        type='FPN',
        in_channels=[128, 256, 512, 1024],
        out_channels=256,
        num_outs=5),
    rpn_head=dict(
        type='RPNHead',
        in_channels=256,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            scales=[8],
            ratios=[0.5, 1.0, 2.0],
            strides=[4, 8, 16, 32, 64]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),
        loss_bbox=dict(
            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),
    roi_head=dict(
        type='CascadeRoIHead',
        num_stages=3,
        stage_loss_weights=[1, 0.5, 0.25],
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=[
            dict(
                type='ConvFCBBoxHead',
                num_shared_convs=4,
                num_shared_fcs=1,
                in_channels=256,
                conv_out_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=1,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.1, 0.1, 0.2, 0.2]),
                reg_class_agnostic=False,
                reg_decoded_bbox=True,
                norm_cfg=dict(type='BN', requires_grad=True),
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='GIoULoss', loss_weight=10.0)),
            dict(
                type='ConvFCBBoxHead',
                num_shared_convs=4,
                num_shared_fcs=1,
                in_channels=256,
                conv_out_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=1,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.05, 0.05, 0.1, 0.1]),
                reg_class_agnostic=False,
                reg_decoded_bbox=True,
                norm_cfg=dict(type='BN', requires_grad=True),
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='GIoULoss', loss_weight=10.0)),
            dict(
                type='ConvFCBBoxHead',
                num_shared_convs=4,
                num_shared_fcs=1,
                in_channels=256,
                conv_out_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=1,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.033, 0.033, 0.067, 0.067]),
                reg_class_agnostic=False,
                reg_decoded_bbox=True,
                norm_cfg=dict(type='BN', requires_grad=True),
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='GIoULoss', loss_weight=10.0))
        ],
        mask_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        mask_head=dict(
            type='FCNMaskHead',
            num_convs=4,
            in_channels=256,
            conv_out_channels=256,
            num_classes=1,
            loss_mask=dict(
                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),
    train_cfg=dict(
        rpn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.7,
                neg_iou_thr=0.3,
                min_pos_iou=0.3,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=256,
                pos_fraction=0.5,
                neg_pos_ub=-1,
                add_gt_as_proposals=False),
            allowed_border=0,
            pos_weight=-1,
            debug=False),
        rpn_proposal=dict(
            nms_across_levels=False,
            nms_pre=2000,
            nms_post=2000,
            max_per_img=2000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=[
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.5,
                    neg_iou_thr=0.5,
                    min_pos_iou=0.5,
                    match_low_quality=False,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                mask_size=28,
                pos_weight=-1,
                debug=False),
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.6,
                    neg_iou_thr=0.6,
                    min_pos_iou=0.6,
                    match_low_quality=False,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                mask_size=28,
                pos_weight=-1,
                debug=False),
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.7,
                    neg_iou_thr=0.7,
                    min_pos_iou=0.7,
                    match_low_quality=False,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                mask_size=28,
                pos_weight=-1,
                debug=False)
        ]),
    test_cfg=dict(
        rpn=dict(
            nms_across_levels=False,
            nms_pre=1000,
            nms_post=1000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            score_thr=0.05,
            nms=dict(type='nms', iou_threshold=0.3),
            max_per_img=100,
            mask_thr_binary=0.5)))
dataset_type = 'CocoDataset'
classes = ('beading', )
data_root = 'data/bead_cropped_detection/'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),
    dict(type='RandomFlip', flip_ratio=0.5),
    dict(
        type='AutoAugment',
        policies=[[{
            'type':
            'Resize',
            'img_scale': [(480, 1333), (512, 1333), (544, 1333), (576, 1333),
                          (608, 1333), (640, 1333), (672, 1333), (704, 1333),
                          (736, 1333), (768, 1333), (800, 1333)],
            'multiscale_mode':
            'value',
            'keep_ratio':
            True
        }],
                  [{
                      'type': 'Resize',
                      'img_scale': [(400, 1333), (500, 1333), (600, 1333)],
                      'multiscale_mode': 'value',
                      'keep_ratio': True
                  }, {
                      'type': 'RandomCrop',
                      'crop_type': 'absolute_range',
                      'crop_size': (384, 600),
                      'allow_negative_crop': True
                  }, {
                      'type':
                      'Resize',
                      'img_scale': [(480, 1333), (512, 1333), (544, 1333),
                                    (576, 1333), (608, 1333), (640, 1333),
                                    (672, 1333), (704, 1333), (736, 1333),
                                    (768, 1333), (800, 1333)],
                      'multiscale_mode':
                      'value',
                      'override':
                      True,
                      'keep_ratio':
                      True
                  }]]),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad', size_divisor=32),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(1333, 800),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=1,
    workers_per_gpu=1,
    train=dict(
        type='CocoDataset',
        classes=('beading', ),
        ann_file='data/bead_cropped_detection/traintype2lower.json',
        img_prefix='data/bead_cropped_detection/images/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),
            dict(type='RandomFlip', flip_ratio=0.5),
            dict(
                type='AutoAugment',
                policies=[[{
                    'type':
                    'Resize',
                    'img_scale': [(480, 1333), (512, 1333), (544, 1333),
                                  (576, 1333), (608, 1333), (640, 1333),
                                  (672, 1333), (704, 1333), (736, 1333),
                                  (768, 1333), (800, 1333)],
                    'multiscale_mode':
                    'value',
                    'keep_ratio':
                    True
                }],
                          [{
                              'type': 'Resize',
                              'img_scale': [(400, 1333), (500, 1333),
                                            (600, 1333)],
                              'multiscale_mode': 'value',
                              'keep_ratio': True
                          }, {
                              'type': 'RandomCrop',
                              'crop_type': 'absolute_range',
                              'crop_size': (384, 600),
                              'allow_negative_crop': True
                          }, {
                              'type':
                              'Resize',
                              'img_scale': [(480, 1333), (512, 1333),
                                            (544, 1333), (576, 1333),
                                            (608, 1333), (640, 1333),
                                            (672, 1333), (704, 1333),
                                            (736, 1333), (768, 1333),
                                            (800, 1333)],
                              'multiscale_mode':
                              'value',
                              'override':
                              True,
                              'keep_ratio':
                              True
                          }]]),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='DefaultFormatBundle'),
            dict(
                type='Collect',
                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])
        ]),
    val=dict(
        type='CocoDataset',
        classes=('beading', ),
        ann_file='data/bead_cropped_detection/testtype2lower.json',
        img_prefix='data/bead_cropped_detection/images/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='CocoDataset',
        classes=('beading', ),
        ann_file='data/bead_cropped_detection/testtype2lower.json',
        img_prefix='data/bead_cropped_detection/images/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
evaluation = dict(interval=1, metric=['bbox', 'segm'])
optimizer = dict(
    type='AdamW',
    lr=0.0001,
    betas=(0.9, 0.999),
    weight_decay=0.05,
    paramwise_cfg=dict(
        custom_keys=dict(
            absolute_pos_embed=dict(decay_mult=0.0),
            relative_position_bias_table=dict(decay_mult=0.0),
            norm=dict(decay_mult=0.0))))
optimizer_config = dict(grad_clip=None)
lr_config = dict(
    policy='step',
    warmup='linear',
    warmup_iters=500,
    warmup_ratio=0.001,
    step=[27, 33])
runner = dict(type='EpochBasedRunner', max_epochs=100)
checkpoint_config = dict(interval=1, max_keep_ckpts=4)
log_config = dict(
    interval=2,
    hooks=[dict(type='TextLoggerHook'),
           dict(type='TensorboardLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
work_dir = 'freeze/cascade_mask_rcnn_swin_base_pretrain_22k'
gpu_ids = range(0, 1)

2021-05-24 11:40:13,812 - mmdet - INFO - load model from: pretrained/swin_base_patch4_window12_384_22k.pth
/projects/bw83/anley1/conda_envs/swinEnv/lib/python3.7/site-packages/torch/nn/functional.py:3121: UserWarning: Default upsampling behavior when mode=bicubic is changed to align_corners=False since 0.4.0. Please specify align_corners=True if the old behavior is desired. See the documentation of nn.Upsample for details.
  "See the documentation of nn.Upsample for details.".format(mode))
2021-05-24 11:40:19,338 - mmdet - WARNING - The model and loaded state dict do not match exactly

size mismatch for layers.0.blocks.0.attn.relative_position_index: copying a param with shape torch.Size([144, 144]) from checkpoint, the shape in current model is torch.Size([49, 49]).
size mismatch for layers.0.blocks.1.attn.relative_position_index: copying a param with shape torch.Size([144, 144]) from checkpoint, the shape in current model is torch.Size([49, 49]).
size mismatch for layers.1.blocks.0.attn.relative_position_index: copying a param with shape torch.Size([144, 144]) from checkpoint, the shape in current model is torch.Size([49, 49]).
size mismatch for layers.1.blocks.1.attn.relative_position_index: copying a param with shape torch.Size([144, 144]) from checkpoint, the shape in current model is torch.Size([49, 49]).
size mismatch for layers.2.blocks.0.attn.relative_position_index: copying a param with shape torch.Size([144, 144]) from checkpoint, the shape in current model is torch.Size([49, 49]).
size mismatch for layers.2.blocks.1.attn.relative_position_index: copying a param with shape torch.Size([144, 144]) from checkpoint, the shape in current model is torch.Size([49, 49]).
size mismatch for layers.2.blocks.2.attn.relative_position_index: copying a param with shape torch.Size([144, 144]) from checkpoint, the shape in current model is torch.Size([49, 49]).
size mismatch for layers.2.blocks.3.attn.relative_position_index: copying a param with shape torch.Size([144, 144]) from checkpoint, the shape in current model is torch.Size([49, 49]).
size mismatch for layers.2.blocks.4.attn.relative_position_index: copying a param with shape torch.Size([144, 144]) from checkpoint, the shape in current model is torch.Size([49, 49]).
size mismatch for layers.2.blocks.5.attn.relative_position_index: copying a param with shape torch.Size([144, 144]) from checkpoint, the shape in current model is torch.Size([49, 49]).
size mismatch for layers.2.blocks.6.attn.relative_position_index: copying a param with shape torch.Size([144, 144]) from checkpoint, the shape in current model is torch.Size([49, 49]).
size mismatch for layers.2.blocks.7.attn.relative_position_index: copying a param with shape torch.Size([144, 144]) from checkpoint, the shape in current model is torch.Size([49, 49]).
size mismatch for layers.2.blocks.8.attn.relative_position_index: copying a param with shape torch.Size([144, 144]) from checkpoint, the shape in current model is torch.Size([49, 49]).
size mismatch for layers.2.blocks.9.attn.relative_position_index: copying a param with shape torch.Size([144, 144]) from checkpoint, the shape in current model is torch.Size([49, 49]).
size mismatch for layers.2.blocks.10.attn.relative_position_index: copying a param with shape torch.Size([144, 144]) from checkpoint, the shape in current model is torch.Size([49, 49]).
size mismatch for layers.2.blocks.11.attn.relative_position_index: copying a param with shape torch.Size([144, 144]) from checkpoint, the shape in current model is torch.Size([49, 49]).
size mismatch for layers.2.blocks.12.attn.relative_position_index: copying a param with shape torch.Size([144, 144]) from checkpoint, the shape in current model is torch.Size([49, 49]).
size mismatch for layers.2.blocks.13.attn.relative_position_index: copying a param with shape torch.Size([144, 144]) from checkpoint, the shape in current model is torch.Size([49, 49]).
size mismatch for layers.2.blocks.14.attn.relative_position_index: copying a param with shape torch.Size([144, 144]) from checkpoint, the shape in current model is torch.Size([49, 49]).
size mismatch for layers.2.blocks.15.attn.relative_position_index: copying a param with shape torch.Size([144, 144]) from checkpoint, the shape in current model is torch.Size([49, 49]).
size mismatch for layers.2.blocks.16.attn.relative_position_index: copying a param with shape torch.Size([144, 144]) from checkpoint, the shape in current model is torch.Size([49, 49]).
size mismatch for layers.2.blocks.17.attn.relative_position_index: copying a param with shape torch.Size([144, 144]) from checkpoint, the shape in current model is torch.Size([49, 49]).
size mismatch for layers.3.blocks.0.attn.relative_position_index: copying a param with shape torch.Size([144, 144]) from checkpoint, the shape in current model is torch.Size([49, 49]).
size mismatch for layers.3.blocks.1.attn.relative_position_index: copying a param with shape torch.Size([144, 144]) from checkpoint, the shape in current model is torch.Size([49, 49]).
unexpected key in source state_dict: norm.weight, norm.bias, head.weight, head.bias, layers.0.blocks.1.attn_mask, layers.1.blocks.1.attn_mask, layers.2.blocks.1.attn_mask, layers.2.blocks.3.attn_mask, layers.2.blocks.5.attn_mask, layers.2.blocks.7.attn_mask, layers.2.blocks.9.attn_mask, layers.2.blocks.11.attn_mask, layers.2.blocks.13.attn_mask, layers.2.blocks.15.attn_mask, layers.2.blocks.17.attn_mask

missing keys in source state_dict: norm0.weight, norm0.bias, norm1.weight, norm1.bias, norm2.weight, norm2.bias, norm3.weight, norm3.bias

2021-05-24 11:40:27,330 - mmdet - INFO - Start running, host: anley1@m3g009, work_dir: /projects/bw83/anley1/Swin-Transformer-Object-Detection/freeze/cascade_mask_rcnn_swin_base_pretrain_22k
2021-05-24 11:40:27,331 - mmdet - INFO - workflow: [('train', 1)], max: 100 epochs
apex is not installed
apex is not installed
apex is not installed
apex is not installed
loading annotations into memory...
Done (t=0.03s)
creating index...
index created!
loading annotations into memory...
Done (t=0.03s)
creating index...
index created!
2021-05-24 11:40:37,261 - mmdet - INFO - Epoch [1][2/43]	lr: 2.998e-07, eta: 4:07:38, time: 3.457, data_time: 1.627, memory: 6123, loss_rpn_cls: 0.6816, loss_rpn_bbox: 0.2142, s0.loss_cls: 0.6857, s0.acc: 57.3242, s0.loss_bbox: 0.0972, s0.loss_mask: 10.1049, s1.loss_cls: 0.3081, s1.acc: 80.2734, s1.loss_bbox: 0.0094, s1.loss_mask: 4.9796, s2.loss_cls: 0.1957, s2.acc: 22.1680, s2.loss_bbox: 0.0009, s2.loss_mask: 0.8524, loss: 18.1297
2021-05-24 11:40:38,603 - mmdet - INFO - Epoch [1][4/43]	lr: 6.994e-07, eta: 2:28:00, time: 0.677, data_time: 0.085, memory: 6206, loss_rpn_cls: 0.6899, loss_rpn_bbox: 0.2940, s0.loss_cls: 0.6806, s0.acc: 61.9141, s0.loss_bbox: 0.0794, s0.loss_mask: 9.6623, s1.loss_cls: 0.3087, s1.acc: 80.2734, s1.loss_bbox: 0.0109, s1.loss_mask: 4.5569, s2.loss_cls: 0.1950, s2.acc: 22.8516, s2.loss_bbox: 0.0018, s2.loss_mask: 1.0534, loss: 17.5330
2021-05-24 11:40:39,855 - mmdet - INFO - Epoch [1][6/43]	lr: 1.099e-06, eta: 1:53:33, time: 0.626, data_time: 0.045, memory: 6249, loss_rpn_cls: 0.6875, loss_rpn_bbox: 0.2381, s0.loss_cls: 0.6615, s0.acc: 65.2344, s0.loss_bbox: 0.1183, s0.loss_mask: 9.9528, s1.loss_cls: 0.3017, s1.acc: 83.3008, s1.loss_bbox: 0.0137, s1.loss_mask: 5.0833, s2.loss_cls: 0.1902, s2.acc: 29.9805, s2.loss_bbox: 0.0022, s2.loss_mask: 0.9794, loss: 18.2287
2021-05-24 11:40:40,874 - mmdet - INFO - Epoch [1][8/43]	lr: 1.499e-06, eta: 1:34:07, time: 0.503, data_time: 0.025, memory: 6249, loss_rpn_cls: 0.6934, loss_rpn_bbox: 0.2922, s0.loss_cls: 0.6244, s0.acc: 77.6367, s0.loss_bbox: 0.0719, s0.loss_mask: 9.2264, s1.loss_cls: 0.2848, s1.acc: 89.6484, s1.loss_bbox: 0.0090, s1.loss_mask: 4.6107, s2.loss_cls: 0.1783, s2.acc: 45.1172, s2.loss_bbox: 0.0022, s2.loss_mask: 0.9865, loss: 16.9798
2021-05-24 11:40:42,120 - mmdet - INFO - Epoch [1][10/43]	lr: 1.898e-06, eta: 1:24:16, time: 0.630, data_time: 0.086, memory: 6449, loss_rpn_cls: 0.6863, loss_rpn_bbox: 0.2973, s0.loss_cls: 0.5895, s0.acc: 83.8867, s0.loss_bbox: 0.1058, s0.loss_mask: 7.7122, s1.loss_cls: 0.2741, s1.acc: 90.1367, s1.loss_bbox: 0.0197, s1.loss_mask: 4.2530, s2.loss_cls: 0.1695, s2.acc: 57.6172, s2.loss_bbox: 0.0020, s2.loss_mask: 0.9646, loss: 15.0741
2021-05-24 11:40:43,214 - mmdet - INFO - Epoch [1][12/43]	lr: 2.298e-06, eta: 1:16:42, time: 0.547, data_time: 0.025, memory: 6449, loss_rpn_cls: 0.6858, loss_rpn_bbox: 0.2696, s0.loss_cls: 0.5488, s0.acc: 89.8438, s0.loss_bbox: 0.0363, s0.loss_mask: 7.1883, s1.loss_cls: 0.2520, s1.acc: 93.4570, s1.loss_bbox: 0.0102, s1.loss_mask: 3.9935, s2.loss_cls: 0.1570, s2.acc: 73.6328, s2.loss_bbox: 0.0018, s2.loss_mask: 0.8521, loss: 13.9955
2021-05-24 11:40:44,585 - mmdet - INFO - Epoch [1][14/43]	lr: 2.697e-06, eta: 1:12:42, time: 0.685, data_time: 0.079, memory: 6449, loss_rpn_cls: 0.6879, loss_rpn_bbox: 0.2563, s0.loss_cls: 0.5030, s0.acc: 91.1133, s0.loss_bbox: 0.0859, s0.loss_mask: 6.4564, s1.loss_cls: 0.2355, s1.acc: 92.3828, s1.loss_bbox: 0.0097, s1.loss_mask: 3.6208, s2.loss_cls: 0.1464, s2.acc: 86.3281, s2.loss_bbox: 0.0012, s2.loss_mask: 0.9228, loss: 12.9259
2021-05-24 11:40:45,840 - mmdet - INFO - Epoch [1][16/43]	lr: 3.097e-06, eta: 1:09:11, time: 0.627, data_time: 0.048, memory: 6656, loss_rpn_cls: 0.6864, loss_rpn_bbox: 0.2864, s0.loss_cls: 0.4792, s0.acc: 88.9648, s0.loss_bbox: 0.1769, s0.loss_mask: 5.5731, s1.loss_cls: 0.2166, s1.acc: 91.7969, s1.loss_bbox: 0.0209, s1.loss_mask: 2.9830, s2.loss_cls: 0.1295, s2.acc: 92.0898, s2.loss_bbox: 0.0005, s2.loss_mask: 0.8746, loss: 11.4271
2021-05-24 11:40:47,421 - mmdet - INFO - Epoch [1][18/43]	lr: 3.497e-06, eta: 1:07:44, time: 0.791, data_time: 0.068, memory: 7904, loss_rpn_cls: 0.6825, loss_rpn_bbox: 0.1994, s0.loss_cls: 0.4060, s0.acc: 92.6758, s0.loss_bbox: 0.0510, s0.loss_mask: 5.2569, s1.loss_cls: 0.1906, s1.acc: 93.3594, s1.loss_bbox: 0.0071, s1.loss_mask: 3.1497, s2.loss_cls: 0.1159, s2.acc: 93.5547, s2.loss_bbox: 0.0015, s2.loss_mask: 0.7442, loss: 10.8048
2021-05-24 11:40:48,777 - mmdet - INFO - Epoch [1][20/43]	lr: 3.896e-06, eta: 1:05:46, time: 0.678, data_time: 0.039, memory: 7904, loss_rpn_cls: 0.6817, loss_rpn_bbox: 0.2438, s0.loss_cls: 0.3844, s0.acc: 91.1133, s0.loss_bbox: 0.1044, s0.loss_mask: 3.7794, s1.loss_cls: 0.1767, s1.acc: 92.7734, s1.loss_bbox: 0.0101, s1.loss_mask: 2.2527, s2.loss_cls: 0.1048, s2.acc: 93.2617, s2.loss_bbox: 0.0004, s2.loss_mask: 0.7669, loss: 8.5053
2021-05-24 11:40:49,924 - mmdet - INFO - Epoch [1][22/43]	lr: 4.296e-06, eta: 1:03:29, time: 0.573, data_time: 0.028, memory: 7904, loss_rpn_cls: 0.6859, loss_rpn_bbox: 0.2533, s0.loss_cls: 0.3464, s0.acc: 91.7969, s0.loss_bbox: 0.0849, s0.loss_mask: 3.5796, s1.loss_cls: 0.1624, s1.acc: 93.0664, s1.loss_bbox: 0.0091, s1.loss_mask: 1.9737, s2.loss_cls: 0.0937, s2.acc: 93.3594, s2.loss_bbox: 0.0016, s2.loss_mask: 0.8229, loss: 8.0135
2021-05-24 11:40:51,118 - mmdet - INFO - Epoch [1][24/43]	lr: 4.695e-06, eta: 1:01:42, time: 0.597, data_time: 0.074, memory: 7904, loss_rpn_cls: 0.6742, loss_rpn_bbox: 0.2169, s0.loss_cls: 0.3068, s0.acc: 93.0664, s0.loss_bbox: 0.0445, s0.loss_mask: 2.5898, s1.loss_cls: 0.1434, s1.acc: 93.7500, s1.loss_bbox: 0.0042, s1.loss_mask: 1.7235, s2.loss_cls: 0.0822, s2.acc: 93.9453, s2.loss_bbox: 0.0004, s2.loss_mask: 0.7120, loss: 6.4978
2021-05-24 11:40:52,256 - mmdet - INFO - Epoch [1][26/43]	lr: 5.095e-06, eta: 1:00:03, time: 0.569, data_time: 0.046, memory: 7904, loss_rpn_cls: 0.6807, loss_rpn_bbox: 0.2824, s0.loss_cls: 0.2890, s0.acc: 92.4805, s0.loss_bbox: 0.0745, s0.loss_mask: 2.4869, s1.loss_cls: 0.1346, s1.acc: 93.4570, s1.loss_bbox: 0.0120, s1.loss_mask: 1.4299, s2.loss_cls: 0.0735, s2.acc: 94.0430, s2.loss_bbox: 0.0003, s2.loss_mask: 0.5832, loss: 6.0470
2021-05-24 11:40:53,533 - mmdet - INFO - Epoch [1][28/43]	lr: 5.495e-06, eta: 0:58:59, time: 0.639, data_time: 0.077, memory: 7904, loss_rpn_cls: 0.6654, loss_rpn_bbox: 0.1577, s0.loss_cls: 0.2610, s0.acc: 93.0664, s0.loss_bbox: 0.1005, s0.loss_mask: 2.8400, s1.loss_cls: 0.1172, s1.acc: 94.7266, s1.loss_bbox: 0.0088, s1.loss_mask: 1.3381, s2.loss_cls: 0.0626, s2.acc: 95.1172, s2.loss_bbox: 0.0006, s2.loss_mask: 0.7073, loss: 6.2593
2021-05-24 11:40:54,636 - mmdet - INFO - Epoch [1][30/43]	lr: 5.894e-06, eta: 0:57:38, time: 0.551, data_time: 0.031, memory: 7904, loss_rpn_cls: 0.6787, loss_rpn_bbox: 0.2176, s0.loss_cls: 0.2960, s0.acc: 91.2109, s0.loss_bbox: 0.1234, s0.loss_mask: 2.8337, s1.loss_cls: 0.1257, s1.acc: 93.2617, s1.loss_bbox: 0.0109, s1.loss_mask: 1.0541, s2.loss_cls: 0.0635, s2.acc: 93.7500, s2.loss_bbox: 0.0006, s2.loss_mask: 0.6032, loss: 6.0075
2021-05-24 11:40:55,693 - mmdet - INFO - Epoch [1][32/43]	lr: 6.294e-06, eta: 0:56:22, time: 0.529, data_time: 0.022, memory: 7904, loss_rpn_cls: 0.6790, loss_rpn_bbox: 0.2634, s0.loss_cls: 0.2705, s0.acc: 92.1875, s0.loss_bbox: 0.0781, s0.loss_mask: 2.4107, s1.loss_cls: 0.1199, s1.acc: 93.2617, s1.loss_bbox: 0.0120, s1.loss_mask: 0.9363, s2.loss_cls: 0.0617, s2.acc: 93.6523, s2.loss_bbox: 0.0022, s2.loss_mask: 0.5768, loss: 5.4105
2021-05-24 11:40:56,648 - mmdet - INFO - Epoch [1][34/43]	lr: 6.693e-06, eta: 0:55:01, time: 0.478, data_time: 0.022, memory: 7904, loss_rpn_cls: 0.6752, loss_rpn_bbox: 0.2354, s0.loss_cls: 0.2993, s0.acc: 91.0156, s0.loss_bbox: 0.1499, s0.loss_mask: 2.5439, s1.loss_cls: 0.1244, s1.acc: 92.9688, s1.loss_bbox: 0.0239, s1.loss_mask: 0.8675, s2.loss_cls: 0.0572, s2.acc: 94.1406, s2.loss_bbox: 0.0008, s2.loss_mask: 0.4728, loss: 5.4503
2021-05-24 11:40:57,825 - mmdet - INFO - Epoch [1][36/43]	lr: 7.093e-06, eta: 0:54:15, time: 0.588, data_time: 0.036, memory: 7904, loss_rpn_cls: 0.6798, loss_rpn_bbox: 0.2140, s0.loss_cls: 0.3031, s0.acc: 90.9180, s0.loss_bbox: 0.1316, s0.loss_mask: 2.6169, s1.loss_cls: 0.1247, s1.acc: 93.0664, s1.loss_bbox: 0.0123, s1.loss_mask: 0.8440, s2.loss_cls: 0.0585, s2.acc: 93.4570, s2.loss_bbox: 0.0025, s2.loss_mask: 0.4703, loss: 5.4577
2021-05-24 11:40:58,976 - mmdet - INFO - Epoch [1][38/43]	lr: 7.493e-06, eta: 0:53:32, time: 0.575, data_time: 0.021, memory: 7904, loss_rpn_cls: 0.6655, loss_rpn_bbox: 0.1893, s0.loss_cls: 0.2801, s0.acc: 91.9922, s0.loss_bbox: 0.1376, s0.loss_mask: 2.9018, s1.loss_cls: 0.1107, s1.acc: 94.2383, s1.loss_bbox: 0.0125, s1.loss_mask: 0.9544, s2.loss_cls: 0.0510, s2.acc: 94.8242, s2.loss_bbox: 0.0003, s2.loss_mask: 0.5030, loss: 5.8061
2021-05-24 11:41:00,447 - mmdet - INFO - Epoch [1][40/43]	lr: 7.892e-06, eta: 0:53:26, time: 0.736, data_time: 0.061, memory: 7904, loss_rpn_cls: 0.6771, loss_rpn_bbox: 0.1930, s0.loss_cls: 0.3518, s0.acc: 88.7695, s0.loss_bbox: 0.1824, s0.loss_mask: 2.6589, s1.loss_cls: 0.1486, s1.acc: 91.2109, s1.loss_bbox: 0.0309, s1.loss_mask: 0.9274, s2.loss_cls: 0.0636, s2.acc: 92.7734, s2.loss_bbox: 0.0004, s2.loss_mask: 0.4547, loss: 5.6888
2021-05-24 11:41:01,379 - mmdet - INFO - Epoch [1][42/43]	lr: 8.292e-06, eta: 0:52:27, time: 0.466, data_time: 0.055, memory: 7904, loss_rpn_cls: 0.6655, loss_rpn_bbox: 0.1819, s0.loss_cls: 0.2985, s0.acc: 90.9180, s0.loss_bbox: 0.1485, s0.loss_mask: 2.5427, s1.loss_cls: 0.1199, s1.acc: 93.1641, s1.loss_bbox: 0.0183, s1.loss_mask: 0.8611, s2.loss_cls: 0.0558, s2.acc: 93.7500, s2.loss_bbox: 0.0034, s2.loss_mask: 0.4583, loss: 5.3538
2021-05-24 11:41:01,741 - mmdet - INFO - Saving checkpoint at 1 epochs
[                                                  ] 0/8, elapsed: 0s, ETA:[>>>>                               ] 1/8, 0.3 task/s, elapsed: 3s, ETA:    21s[>>>>>>>>                           ] 2/8, 0.6 task/s, elapsed: 4s, ETA:    11s[>>>>>>>>>>>>>                      ] 3/8, 0.7 task/s, elapsed: 4s, ETA:     7s[>>>>>>>>>>>>>>>>>                  ] 4/8, 0.9 task/s, elapsed: 5s, ETA:     5s[>>>>>>>>>>>>>>>>>>>>>              ] 5/8, 1.0 task/s, elapsed: 5s, ETA:     3s[>>>>>>>>>>>>>>>>>>>>>>>>>>         ] 6/8, 1.1 task/s, elapsed: 6s, ETA:     2s[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>     ] 7/8, 1.2 task/s, elapsed: 6s, ETA:     1s[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] 8/8, 1.2 task/s, elapsed: 6s, ETA:     0s2021-05-24 11:41:14,406 - mmdet - INFO - Evaluating bbox...
2021-05-24 11:41:15,197 - mmdet - INFO - Evaluating segm...
2021-05-24 11:41:16,563 - mmdet - INFO - Exp name: cascade_mask_rcnn_swin_base_patch4_window7_mstrain_480-800_giou_4conv1f_adamw_3x_coco.py
2021-05-24 11:41:16,563 - mmdet - INFO - Epoch(val) [1][43]	bbox_mAP: 0.0080, bbox_mAP_30: 0.0480, bbox_mAP_50: 0.0020, bbox_mAP_75: 0.0000, bbox_mAP_s: 0.0020, bbox_mAP_m: 0.0100, bbox_mAP_l: -1.0000, bbox_mAP_copypaste: 0.008 0.048 0.002 0.000 0.002 0.010 -1.000, segm_mAP: 0.0040, segm_mAP_30: 0.0270, segm_mAP_50: 0.0000, segm_mAP_75: 0.0000, segm_mAP_s: 0.0020, segm_mAP_m: 0.0050, segm_mAP_l: -1.0000, segm_mAP_copypaste: 0.004 0.027 0.000 0.000 0.002 0.005 -1.000
Loading and preparing results...
DONE (t=0.08s)
creating index...
index created!
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=0.61s).
Accumulating evaluation results...
DONE (t=0.08s).
Average Precision  (AP) @[ IoU=0.30:0.95 | area=   all | maxDets=100 ] = 0.008
Average Precision  (AP) @[ IoU=0.30      | area=   all | maxDets=1000 ] = 0.048
Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.002
Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.000
Average Precision  (AP) @[ IoU=0.30:0.95 | area= small | maxDets=1000 ] = 0.002
Average Precision  (AP) @[ IoU=0.30:0.95 | area=medium | maxDets=1000 ] = 0.010
Average Precision  (AP) @[ IoU=0.30:0.95 | area= large | maxDets=1000 ] = -1.000
Average Recall     (AR) @[ IoU=0.30:0.95 | area=   all | maxDets=100 ] = 0.057
Average Recall     (AR) @[ IoU=0.30:0.95 | area=   all | maxDets=300 ] = 0.057
Average Recall     (AR) @[ IoU=0.30:0.95 | area=   all | maxDets=1000 ] = 0.057
Average Recall     (AR) @[ IoU=0.30:0.95 | area= small | maxDets=1000 ] = 0.027
Average Recall     (AR) @[ IoU=0.30:0.95 | area=medium | maxDets=1000 ] = 0.069
Average Recall     (AR) @[ IoU=0.30:0.95 | area= large | maxDets=1000 ] = -1.000
Loading and preparing results...
DONE (t=0.75s)
creating index...
index created!
Running per image evaluation...
Evaluate annotation type *segm*
DONE (t=0.59s).
Accumulating evaluation results...
DONE (t=0.02s).
Average Precision  (AP) @[ IoU=0.30:0.95 | area=   all | maxDets=100 ] = 0.004
Average Precision  (AP) @[ IoU=0.30      | area=   all | maxDets=1000 ] = 0.027
Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.000
Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.000
Average Precision  (AP) @[ IoU=0.30:0.95 | area= small | maxDets=1000 ] = 0.002
Average Precision  (AP) @[ IoU=0.30:0.95 | area=medium | maxDets=1000 ] = 0.005
Average Precision  (AP) @[ IoU=0.30:0.95 | area= large | maxDets=1000 ] = -1.000
Average Recall     (AR) @[ IoU=0.30:0.95 | area=   all | maxDets=100 ] = 0.045
Average Recall     (AR) @[ IoU=0.30:0.95 | area=   all | maxDets=300 ] = 0.045
Average Recall     (AR) @[ IoU=0.30:0.95 | area=   all | maxDets=1000 ] = 0.045
Average Recall     (AR) @[ IoU=0.30:0.95 | area= small | maxDets=1000 ] = 0.020
Average Recall     (AR) @[ IoU=0.30:0.95 | area=medium | maxDets=1000 ] = 0.055
Average Recall     (AR) @[ IoU=0.30:0.95 | area= large | maxDets=1000 ] = -1.000
2021-05-24 11:41:20,690 - mmdet - INFO - Epoch [2][2/43]	lr: 8.891e-06, eta: 0:55:23, time: 2.053, data_time: 1.303, memory: 7904, loss_rpn_cls: 0.6698, loss_rpn_bbox: 0.2589, s0.loss_cls: 0.3691, s0.acc: 88.4766, s0.loss_bbox: 0.1902, s0.loss_mask: 2.3988, s1.loss_cls: 0.1513, s1.acc: 91.2109, s1.loss_bbox: 0.0267, s1.loss_mask: 0.9056, s2.loss_cls: 0.0690, s2.acc: 92.3828, s2.loss_bbox: 0.0025, s2.loss_mask: 0.3833, loss: 5.4253
2021-05-24 11:41:21,908 - mmdet - INFO - Epoch [2][4/43]	lr: 9.291e-06, eta: 0:54:51, time: 0.610, data_time: 0.034, memory: 7904, loss_rpn_cls: 0.6598, loss_rpn_bbox: 0.2258, s0.loss_cls: 0.2947, s0.acc: 91.3086, s0.loss_bbox: 0.1587, s0.loss_mask: 1.9224, s1.loss_cls: 0.1203, s1.acc: 93.1641, s1.loss_bbox: 0.0339, s1.loss_mask: 0.9319, s2.loss_cls: 0.0488, s2.acc: 94.8242, s2.loss_bbox: 0.0013, s2.loss_mask: 0.4111, loss: 4.8088
2021-05-24 11:41:23,152 - mmdet - INFO - Epoch [2][6/43]	lr: 9.690e-06, eta: 0:54:23, time: 0.622, data_time: 0.037, memory: 7904, loss_rpn_cls: 0.6660, loss_rpn_bbox: 0.2513, s0.loss_cls: 0.3253, s0.acc: 89.7461, s0.loss_bbox: 0.1787, s0.loss_mask: 2.0776, s1.loss_cls: 0.1292, s1.acc: 92.7734, s1.loss_bbox: 0.0170, s1.loss_mask: 0.8143, s2.loss_cls: 0.0603, s2.acc: 93.4570, s2.loss_bbox: 0.0021, s2.loss_mask: 0.3825, loss: 4.9041
2021-05-24 11:41:24,533 - mmdet - INFO - Epoch [2][8/43]	lr: 1.009e-05, eta: 0:54:08, time: 0.691, data_time: 0.041, memory: 7904, loss_rpn_cls: 0.6698, loss_rpn_bbox: 0.2151, s0.loss_cls: 0.3108, s0.acc: 90.4297, s0.loss_bbox: 0.1365, s0.loss_mask: 1.7937, s1.loss_cls: 0.1280, s1.acc: 92.4805, s1.loss_bbox: 0.0168, s1.loss_mask: 0.8213, s2.loss_cls: 0.0622, s2.acc: 93.1641, s2.loss_bbox: 0.0019, s2.loss_mask: 0.3525, loss: 4.5087
2021-05-24 11:41:25,945 - mmdet - INFO - Epoch [2][10/43]	lr: 1.049e-05, eta: 0:53:57, time: 0.706, data_time: 0.069, memory: 7904, loss_rpn_cls: 0.6674, loss_rpn_bbox: 0.1921, s0.loss_cls: 0.3101, s0.acc: 89.4531, s0.loss_bbox: 0.1609, s0.loss_mask: 1.6586, s1.loss_cls: 0.1377, s1.acc: 91.4062, s1.loss_bbox: 0.0314, s1.loss_mask: 0.7613, s2.loss_cls: 0.0623, s2.acc: 92.8711, s2.loss_bbox: 0.0021, s2.loss_mask: 0.3379, loss: 4.3217
2021-05-24 11:41:27,206 - mmdet - INFO - Epoch [2][12/43]	lr: 1.089e-05, eta: 0:53:36, time: 0.630, data_time: 0.042, memory: 7904, loss_rpn_cls: 0.6717, loss_rpn_bbox: 0.2334, s0.loss_cls: 0.3325, s0.acc: 88.4766, s0.loss_bbox: 0.2092, s0.loss_mask: 1.8149, s1.loss_cls: 0.1363, s1.acc: 91.6016, s1.loss_bbox: 0.0290, s1.loss_mask: 0.7449, s2.loss_cls: 0.0631, s2.acc: 92.6758, s2.loss_bbox: 0.0044, s2.loss_mask: 0.3408, loss: 4.5803
2021-05-24 11:41:28,337 - mmdet - INFO - Epoch [2][14/43]	lr: 1.129e-05, eta: 0:53:05, time: 0.565, data_time: 0.040, memory: 7904, loss_rpn_cls: 0.6604, loss_rpn_bbox: 0.2484, s0.loss_cls: 0.3031, s0.acc: 89.5508, s0.loss_bbox: 0.1899, s0.loss_mask: 1.7975, s1.loss_cls: 0.1252, s1.acc: 92.3828, s1.loss_bbox: 0.0241, s1.loss_mask: 0.7654, s2.loss_cls: 0.0578, s2.acc: 93.4570, s2.loss_bbox: 0.0022, s2.loss_mask: 0.3238, loss: 4.4978
2021-05-24 11:41:29,643 - mmdet - INFO - Epoch [2][16/43]	lr: 1.169e-05, eta: 0:52:50, time: 0.653, data_time: 0.036, memory: 8163, loss_rpn_cls: 0.6650, loss_rpn_bbox: 0.2404, s0.loss_cls: 0.2904, s0.acc: 90.1367, s0.loss_bbox: 0.1831, s0.loss_mask: 1.6524, s1.loss_cls: 0.1146, s1.acc: 93.1641, s1.loss_bbox: 0.0170, s1.loss_mask: 0.7506, s2.loss_cls: 0.0556, s2.acc: 93.8477, s2.loss_bbox: 0.0021, s2.loss_mask: 0.3464, loss: 4.3176
2021-05-24 11:41:31,104 - mmdet - INFO - Epoch [2][18/43]	lr: 1.209e-05, eta: 0:52:46, time: 0.731, data_time: 0.081, memory: 8163, loss_rpn_cls: 0.6581, loss_rpn_bbox: 0.2032, s0.loss_cls: 0.3212, s0.acc: 87.5000, s0.loss_bbox: 0.2494, s0.loss_mask: 1.5752, s1.loss_cls: 0.1366, s1.acc: 91.0156, s1.loss_bbox: 0.0381, s1.loss_mask: 0.6788, s2.loss_cls: 0.0611, s2.acc: 92.6758, s2.loss_bbox: 0.0032, s2.loss_mask: 0.2820, loss: 4.2070
2021-05-24 11:41:32,452 - mmdet - INFO - Epoch [2][20/43]	lr: 1.249e-05, eta: 0:52:35, time: 0.674, data_time: 0.041, memory: 8163, loss_rpn_cls: 0.6564, loss_rpn_bbox: 0.2709, s0.loss_cls: 0.2909, s0.acc: 89.2578, s0.loss_bbox: 0.1488, s0.loss_mask: 1.6002, s1.loss_cls: 0.1340, s1.acc: 91.2109, s1.loss_bbox: 0.0257, s1.loss_mask: 0.6380, s2.loss_cls: 0.0634, s2.acc: 92.4805, s2.loss_bbox: 0.0009, s2.loss_mask: 0.2686, loss: 4.0979
2021-05-24 11:41:33,674 - mmdet - INFO - Epoch [2][22/43]	lr: 1.289e-05, eta: 0:52:16, time: 0.611, data_time: 0.041, memory: 8163, loss_rpn_cls: 0.6544, loss_rpn_bbox: 0.1716, s0.loss_cls: 0.3381, s0.acc: 87.4023, s0.loss_bbox: 0.2910, s0.loss_mask: 1.6146, s1.loss_cls: 0.1349, s1.acc: 91.6992, s1.loss_bbox: 0.0396, s1.loss_mask: 0.7117, s2.loss_cls: 0.0576, s2.acc: 93.6523, s2.loss_bbox: 0.0018, s2.loss_mask: 0.2939, loss: 4.3093
2021-05-24 11:41:34,755 - mmdet - INFO - Epoch [2][24/43]	lr: 1.329e-05, eta: 0:51:49, time: 0.540, data_time: 0.031, memory: 8163, loss_rpn_cls: 0.6398, loss_rpn_bbox: 0.1782, s0.loss_cls: 0.2712, s0.acc: 90.4297, s0.loss_bbox: 0.1510, s0.loss_mask: 1.4207, s1.loss_cls: 0.1202, s1.acc: 92.0898, s1.loss_bbox: 0.0349, s1.loss_mask: 0.5620, s2.loss_cls: 0.0548, s2.acc: 93.6523, s2.loss_bbox: 0.0033, s2.loss_mask: 0.2566, loss: 3.6926
2021-05-24 11:41:35,709 - mmdet - INFO - Epoch [2][26/43]	lr: 1.369e-05, eta: 0:51:16, time: 0.477, data_time: 0.022, memory: 8163, loss_rpn_cls: 0.6344, loss_rpn_bbox: 0.1725, s0.loss_cls: 0.2774, s0.acc: 89.9414, s0.loss_bbox: 0.2256, s0.loss_mask: 1.5532, s1.loss_cls: 0.1098, s1.acc: 93.0664, s1.loss_bbox: 0.0379, s1.loss_mask: 0.5902, s2.loss_cls: 0.0462, s2.acc: 94.8242, s2.loss_bbox: 0.0030, s2.loss_mask: 0.2506, loss: 3.9009
2021-05-24 11:41:36,969 - mmdet - INFO - Epoch [2][28/43]	lr: 1.409e-05, eta: 0:51:03, time: 0.630, data_time: 0.034, memory: 8163, loss_rpn_cls: 0.6448, loss_rpn_bbox: 0.1972, s0.loss_cls: 0.2793, s0.acc: 90.2344, s0.loss_bbox: 0.2017, s0.loss_mask: 1.4026, s1.loss_cls: 0.1120, s1.acc: 92.9688, s1.loss_bbox: 0.0338, s1.loss_mask: 0.5914, s2.loss_cls: 0.0483, s2.acc: 94.4336, s2.loss_bbox: 0.0032, s2.loss_mask: 0.2495, loss: 3.7639
2021-05-24 11:41:38,058 - mmdet - INFO - Epoch [2][30/43]	lr: 1.449e-05, eta: 0:50:41, time: 0.544, data_time: 0.028, memory: 8163, loss_rpn_cls: 0.6444, loss_rpn_bbox: 0.2207, s0.loss_cls: 0.3273, s0.acc: 87.4023, s0.loss_bbox: 0.2889, s0.loss_mask: 1.4705, s1.loss_cls: 0.1223, s1.acc: 92.2852, s1.loss_bbox: 0.0259, s1.loss_mask: 0.5316, s2.loss_cls: 0.0554, s2.acc: 93.4570, s2.loss_bbox: 0.0016, s2.loss_mask: 0.2165, loss: 3.9053
2021-05-24 11:41:39,229 - mmdet - INFO - Epoch [2][32/43]	lr: 1.489e-05, eta: 0:50:24, time: 0.586, data_time: 0.027, memory: 8163, loss_rpn_cls: 0.6477, loss_rpn_bbox: 0.2159, s0.loss_cls: 0.3404, s0.acc: 86.6211, s0.loss_bbox: 0.3519, s0.loss_mask: 1.2448, s1.loss_cls: 0.1299, s1.acc: 91.2109, s1.loss_bbox: 0.0638, s1.loss_mask: 0.5281, s2.loss_cls: 0.0519, s2.acc: 94.0430, s2.loss_bbox: 0.0052, s2.loss_mask: 0.2117, loss: 3.7914
2021-05-24 11:41:40,407 - mmdet - INFO - Epoch [2][34/43]	lr: 1.528e-05, eta: 0:50:09, time: 0.589, data_time: 0.048, memory: 8163, loss_rpn_cls: 0.6207, loss_rpn_bbox: 0.2152, s0.loss_cls: 0.2955, s0.acc: 87.8906, s0.loss_bbox: 0.2370, s0.loss_mask: 1.3154, s1.loss_cls: 0.1250, s1.acc: 91.2109, s1.loss_bbox: 0.0385, s1.loss_mask: 0.5447, s2.loss_cls: 0.0560, s2.acc: 92.6758, s2.loss_bbox: 0.0051, s2.loss_mask: 0.2216, loss: 3.6746
2021-05-24 11:41:41,723 - mmdet - INFO - Epoch [2][36/43]	lr: 1.568e-05, eta: 0:50:02, time: 0.658, data_time: 0.037, memory: 8163, loss_rpn_cls: 0.6373, loss_rpn_bbox: 0.1943, s0.loss_cls: 0.3331, s0.acc: 85.9375, s0.loss_bbox: 0.3662, s0.loss_mask: 1.2362, s1.loss_cls: 0.1226, s1.acc: 91.4062, s1.loss_bbox: 0.0497, s1.loss_mask: 0.5201, s2.loss_cls: 0.0547, s2.acc: 93.3594, s2.loss_bbox: 0.0063, s2.loss_mask: 0.2072, loss: 3.7276
2021-05-24 11:41:42,889 - mmdet - INFO - Epoch [2][38/43]	lr: 1.608e-05, eta: 0:49:47, time: 0.583, data_time: 0.021, memory: 8163, loss_rpn_cls: 0.6335, loss_rpn_bbox: 0.2768, s0.loss_cls: 0.3842, s0.acc: 83.2031, s0.loss_bbox: 0.4408, s0.loss_mask: 1.3873, s1.loss_cls: 0.1493, s1.acc: 89.2578, s1.loss_bbox: 0.0750, s1.loss_mask: 0.5998, s2.loss_cls: 0.0598, s2.acc: 92.4805, s2.loss_bbox: 0.0070, s2.loss_mask: 0.2421, loss: 4.2556
2021-05-24 11:41:44,234 - mmdet - INFO - Epoch [2][40/43]	lr: 1.648e-05, eta: 0:49:42, time: 0.673, data_time: 0.050, memory: 8163, loss_rpn_cls: 0.6549, loss_rpn_bbox: 0.2759, s0.loss_cls: 0.3606, s0.acc: 84.3750, s0.loss_bbox: 0.3894, s0.loss_mask: 1.1773, s1.loss_cls: 0.1393, s1.acc: 90.0391, s1.loss_bbox: 0.0563, s1.loss_mask: 0.4938, s2.loss_cls: 0.0600, s2.acc: 92.3828, s2.loss_bbox: 0.0065, s2.loss_mask: 0.2001, loss: 3.8142
2021-05-24 11:41:45,132 - mmdet - INFO - Epoch [2][42/43]	lr: 1.688e-05, eta: 0:49:15, time: 0.449, data_time: 0.023, memory: 8163, loss_rpn_cls: 0.6143, loss_rpn_bbox: 0.2147, s0.loss_cls: 0.2898, s0.acc: 87.5977, s0.loss_bbox: 0.2734, s0.loss_mask: 1.2777, s1.loss_cls: 0.1223, s1.acc: 91.3086, s1.loss_bbox: 0.0477, s1.loss_mask: 0.5714, s2.loss_cls: 0.0536, s2.acc: 93.3594, s2.loss_bbox: 0.0047, s2.loss_mask: 0.2310, loss: 3.7005
2021-05-24 11:41:45,527 - mmdet - INFO - Saving checkpoint at 2 epochs
/opt/slurm/var/spool/job18662962/slurm_script: line 24: 33682 Killed                  python tools/train.py configs/bead/cascade_mask_rcnn_swin_base_patch4_window7_mstrain_480-800_giou_4conv1f_adamw_3x_coco.py --work-dir freeze/cascade_mask_rcnn_swin_base_pretrain_22k
slurmstepd: error: Detected 1 oom-kill event(s) in step 18662962.batch cgroup. Some of your processes may have been killed by the cgroup out-of-memory handler.
