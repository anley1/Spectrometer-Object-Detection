2021-08-03 19:01:20,557 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.10 (default, Feb 26 2021, 18:47:35) [GCC 7.3.0]
CUDA available: True
GPU 0: Tesla V100-PCIE-16GB
CUDA_HOME: /usr/local/cuda/10.1/
NVCC: Cuda compilation tools, release 10.1, V10.1.105
GCC: gcc (GCC) 5.4.0
PyTorch: 1.6.0+cu101
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2019.0.5 Product Build 20190808 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.5.0 (Git Hash e2ac1fac44c5078ca927cb9b90e1b3066a0b2ed0)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.3
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, 

TorchVision: 0.7.0+cu101
OpenCV: 4.5.2
MMCV: 1.2.7
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 10.1
MMDetection: 2.11.0+c03dc9a
------------------------------------------------------------

2021-08-03 19:01:21,017 - mmdet - INFO - Distributed training: False
2021-08-03 19:01:21,548 - mmdet - INFO - Config:
dataset_type = 'CocoDataset'
classes = ('beading', )
data_root = 'data/'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=False)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='LoadAnnotations', with_bbox=True, with_mask=True,
        poly2mask=True),
    dict(type='Resize', img_scale=(951, 621), keep_ratio=True),
    dict(type='RandomFlip', flip_ratio=0.5),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=False),
    dict(type='Pad', size_divisor=32),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(951, 621),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=False),
            dict(type='Pad', size_divisor=32),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=2,
    workers_per_gpu=2,
    train=dict(
        type='CocoDataset',
        classes=('beading', ),
        ann_file='data/traincombinetype3.json',
        img_prefix='data/bead_combined_type_3/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='LoadAnnotations',
                with_bbox=True,
                with_mask=True,
                poly2mask=True),
            dict(type='Resize', img_scale=(951, 621), keep_ratio=True),
            dict(type='RandomFlip', flip_ratio=0.5),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=False),
            dict(type='Pad', size_divisor=32),
            dict(type='DefaultFormatBundle'),
            dict(
                type='Collect',
                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])
        ]),
    val=dict(
        type='CocoDataset',
        classes=('beading', ),
        ann_file='data/testcombinetype3.json',
        img_prefix='data/bead_combined_type_3/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(951, 621),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=False),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='CocoDataset',
        classes=('beading', ),
        ann_file='data/testcombinetype3.json',
        img_prefix='data/bead_combined_type_3/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(951, 621),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=False),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
evaluation = dict(interval=1, metric=['bbox', 'segm'])
optimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(
    policy='step',
    warmup='linear',
    warmup_iters=500,
    warmup_ratio=0.001,
    step=[24, 27])
runner = dict(type='EpochBasedRunner', max_epochs=28)
checkpoint_config = dict(interval=1, max_keep_ckpts=4)
log_config = dict(
    interval=2,
    hooks=[dict(type='TextLoggerHook'),
           dict(type='TensorboardLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = 'freeze/type_3_hrnet_htc_aug_medium_gray/epoch_8.pth'
resume_from = None
workflow = [('train', 1)]
model = dict(
    type='HybridTaskCascade',
    pretrained='open-mmlab://msra/hrnetv2_w40',
    backbone=dict(
        type='HRNet',
        extra=dict(
            stage1=dict(
                num_modules=1,
                num_branches=1,
                block='BOTTLENECK',
                num_blocks=(4, ),
                num_channels=(64, )),
            stage2=dict(
                num_modules=1,
                num_branches=2,
                block='BASIC',
                num_blocks=(4, 4),
                num_channels=(40, 80)),
            stage3=dict(
                num_modules=4,
                num_branches=3,
                block='BASIC',
                num_blocks=(4, 4, 4),
                num_channels=(40, 80, 160)),
            stage4=dict(
                num_modules=3,
                num_branches=4,
                block='BASIC',
                num_blocks=(4, 4, 4, 4),
                num_channels=(40, 80, 160, 320)))),
    neck=dict(type='HRFPN', in_channels=[40, 80, 160, 320], out_channels=256),
    rpn_head=dict(
        type='RPNHead',
        in_channels=256,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            scales=[8],
            ratios=[0.5, 1.0, 2.0],
            strides=[4, 8, 16, 32, 64]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),
        loss_bbox=dict(
            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),
    roi_head=dict(
        type='HybridTaskCascadeRoIHead',
        interleaved=True,
        mask_info_flow=True,
        num_stages=3,
        stage_loss_weights=[1, 0.5, 0.25],
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=[
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=1,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.1, 0.1, 0.2, 0.2]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,
                               loss_weight=1.0)),
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=1,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.05, 0.05, 0.1, 0.1]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,
                               loss_weight=1.0)),
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=1,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.033, 0.033, 0.067, 0.067]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))
        ],
        mask_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        mask_head=[
            dict(
                type='HTCMaskHead',
                with_conv_res=False,
                num_convs=4,
                in_channels=256,
                conv_out_channels=256,
                num_classes=1,
                loss_mask=dict(
                    type='CrossEntropyLoss', use_mask=True, loss_weight=1.0)),
            dict(
                type='HTCMaskHead',
                num_convs=4,
                in_channels=256,
                conv_out_channels=256,
                num_classes=1,
                loss_mask=dict(
                    type='CrossEntropyLoss', use_mask=True, loss_weight=1.0)),
            dict(
                type='HTCMaskHead',
                num_convs=4,
                in_channels=256,
                conv_out_channels=256,
                num_classes=1,
                loss_mask=dict(
                    type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))
        ],
        semantic_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[8])),
    train_cfg=dict(
        rpn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.7,
                neg_iou_thr=0.3,
                min_pos_iou=0.3,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=256,
                pos_fraction=0.5,
                neg_pos_ub=-1,
                add_gt_as_proposals=False),
            allowed_border=0,
            pos_weight=-1,
            debug=False),
        rpn_proposal=dict(
            nms_pre=2000,
            max_per_img=2000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=[
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.5,
                    neg_iou_thr=0.5,
                    min_pos_iou=0.5,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                mask_size=28,
                pos_weight=-1,
                debug=False),
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.6,
                    neg_iou_thr=0.6,
                    min_pos_iou=0.6,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                mask_size=28,
                pos_weight=-1,
                debug=False),
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.7,
                    neg_iou_thr=0.7,
                    min_pos_iou=0.7,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                mask_size=28,
                pos_weight=-1,
                debug=False)
        ]),
    test_cfg=dict(
        rpn=dict(
            nms_pre=1000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            score_thr=0.001,
            nms=dict(type='nms', iou_threshold=0.3),
            max_per_img=100,
            mask_thr_binary=0.5)))
work_dir = 'freeze/type_3_hrnet_pretrain_6hr_real'
gpu_ids = range(0, 1)

2021-08-03 19:01:22,412 - mmdet - INFO - load model from: open-mmlab://msra/hrnetv2_w40
2021-08-03 19:01:22,413 - mmdet - INFO - Use load_from_openmmlab loader
2021-08-03 19:01:23,981 - mmdet - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: incre_modules.0.0.conv1.weight, incre_modules.0.0.bn1.weight, incre_modules.0.0.bn1.bias, incre_modules.0.0.bn1.running_mean, incre_modules.0.0.bn1.running_var, incre_modules.0.0.bn1.num_batches_tracked, incre_modules.0.0.conv2.weight, incre_modules.0.0.bn2.weight, incre_modules.0.0.bn2.bias, incre_modules.0.0.bn2.running_mean, incre_modules.0.0.bn2.running_var, incre_modules.0.0.bn2.num_batches_tracked, incre_modules.0.0.conv3.weight, incre_modules.0.0.bn3.weight, incre_modules.0.0.bn3.bias, incre_modules.0.0.bn3.running_mean, incre_modules.0.0.bn3.running_var, incre_modules.0.0.bn3.num_batches_tracked, incre_modules.0.0.downsample.0.weight, incre_modules.0.0.downsample.1.weight, incre_modules.0.0.downsample.1.bias, incre_modules.0.0.downsample.1.running_mean, incre_modules.0.0.downsample.1.running_var, incre_modules.0.0.downsample.1.num_batches_tracked, incre_modules.1.0.conv1.weight, incre_modules.1.0.bn1.weight, incre_modules.1.0.bn1.bias, incre_modules.1.0.bn1.running_mean, incre_modules.1.0.bn1.running_var, incre_modules.1.0.bn1.num_batches_tracked, incre_modules.1.0.conv2.weight, incre_modules.1.0.bn2.weight, incre_modules.1.0.bn2.bias, incre_modules.1.0.bn2.running_mean, incre_modules.1.0.bn2.running_var, incre_modules.1.0.bn2.num_batches_tracked, incre_modules.1.0.conv3.weight, incre_modules.1.0.bn3.weight, incre_modules.1.0.bn3.bias, incre_modules.1.0.bn3.running_mean, incre_modules.1.0.bn3.running_var, incre_modules.1.0.bn3.num_batches_tracked, incre_modules.1.0.downsample.0.weight, incre_modules.1.0.downsample.1.weight, incre_modules.1.0.downsample.1.bias, incre_modules.1.0.downsample.1.running_mean, incre_modules.1.0.downsample.1.running_var, incre_modules.1.0.downsample.1.num_batches_tracked, incre_modules.2.0.conv1.weight, incre_modules.2.0.bn1.weight, incre_modules.2.0.bn1.bias, incre_modules.2.0.bn1.running_mean, incre_modules.2.0.bn1.running_var, incre_modules.2.0.bn1.num_batches_tracked, incre_modules.2.0.conv2.weight, incre_modules.2.0.bn2.weight, incre_modules.2.0.bn2.bias, incre_modules.2.0.bn2.running_mean, incre_modules.2.0.bn2.running_var, incre_modules.2.0.bn2.num_batches_tracked, incre_modules.2.0.conv3.weight, incre_modules.2.0.bn3.weight, incre_modules.2.0.bn3.bias, incre_modules.2.0.bn3.running_mean, incre_modules.2.0.bn3.running_var, incre_modules.2.0.bn3.num_batches_tracked, incre_modules.2.0.downsample.0.weight, incre_modules.2.0.downsample.1.weight, incre_modules.2.0.downsample.1.bias, incre_modules.2.0.downsample.1.running_mean, incre_modules.2.0.downsample.1.running_var, incre_modules.2.0.downsample.1.num_batches_tracked, incre_modules.3.0.conv1.weight, incre_modules.3.0.bn1.weight, incre_modules.3.0.bn1.bias, incre_modules.3.0.bn1.running_mean, incre_modules.3.0.bn1.running_var, incre_modules.3.0.bn1.num_batches_tracked, incre_modules.3.0.conv2.weight, incre_modules.3.0.bn2.weight, incre_modules.3.0.bn2.bias, incre_modules.3.0.bn2.running_mean, incre_modules.3.0.bn2.running_var, incre_modules.3.0.bn2.num_batches_tracked, incre_modules.3.0.conv3.weight, incre_modules.3.0.bn3.weight, incre_modules.3.0.bn3.bias, incre_modules.3.0.bn3.running_mean, incre_modules.3.0.bn3.running_var, incre_modules.3.0.bn3.num_batches_tracked, incre_modules.3.0.downsample.0.weight, incre_modules.3.0.downsample.1.weight, incre_modules.3.0.downsample.1.bias, incre_modules.3.0.downsample.1.running_mean, incre_modules.3.0.downsample.1.running_var, incre_modules.3.0.downsample.1.num_batches_tracked, downsamp_modules.0.0.weight, downsamp_modules.0.0.bias, downsamp_modules.0.1.weight, downsamp_modules.0.1.bias, downsamp_modules.0.1.running_mean, downsamp_modules.0.1.running_var, downsamp_modules.0.1.num_batches_tracked, downsamp_modules.1.0.weight, downsamp_modules.1.0.bias, downsamp_modules.1.1.weight, downsamp_modules.1.1.bias, downsamp_modules.1.1.running_mean, downsamp_modules.1.1.running_var, downsamp_modules.1.1.num_batches_tracked, downsamp_modules.2.0.weight, downsamp_modules.2.0.bias, downsamp_modules.2.1.weight, downsamp_modules.2.1.bias, downsamp_modules.2.1.running_mean, downsamp_modules.2.1.running_var, downsamp_modules.2.1.num_batches_tracked, final_layer.0.weight, final_layer.0.bias, final_layer.1.weight, final_layer.1.bias, final_layer.1.running_mean, final_layer.1.running_var, final_layer.1.num_batches_tracked, classifier.weight, classifier.bias

2021-08-03 19:01:31,226 - mmdet - INFO - load checkpoint from freeze/type_3_hrnet_htc_aug_medium_gray/epoch_8.pth
2021-08-03 19:01:31,227 - mmdet - INFO - Use load_from_local loader
2021-08-03 19:02:11,957 - mmdet - INFO - Start running, host: anley1@m3g019, work_dir: /projects/bw83/anley1/Swin-Transformer-Object-Detection/freeze/type_3_hrnet_pretrain_6hr_real
2021-08-03 19:02:11,957 - mmdet - INFO - workflow: [('train', 1)], max: 28 epochs
apex is not installed
apex is not installed
apex is not installed
apex is not installed
loading annotations into memory...
Done (t=0.03s)
creating index...
index created!
loading annotations into memory...
Done (t=0.02s)
creating index...
index created!
/projects/bw83/anley1/conda_envs/swinEnv/lib/python3.7/site-packages/torch/nn/functional.py:3121: UserWarning: Default upsampling behavior when mode=bilinear is changed to align_corners=False since 0.4.0. Please specify align_corners=True if the old behavior is desired. See the documentation of nn.Upsample for details.
  "See the documentation of nn.Upsample for details.".format(mode))
2021-08-03 19:02:33,926 - mmdet - INFO - Epoch [1][2/24]	lr: 5.996e-05, eta: 1:45:06, time: 9.413, data_time: 3.185, memory: 8240, loss_rpn_cls: 1.6232, loss_rpn_bbox: 0.1037, s0.loss_cls: 0.3534, s0.acc: 88.3789, s0.loss_bbox: 0.1640, s0.loss_mask: 0.3551, s1.loss_cls: 0.2251, s1.acc: 89.4327, s1.loss_bbox: 0.2131, s1.loss_mask: 0.1747, s2.loss_cls: 0.1424, s2.acc: 87.4796, s2.loss_bbox: 0.1479, s2.loss_mask: 0.0792, loss: 3.5819
2021-08-03 19:02:36,078 - mmdet - INFO - Epoch [1][4/24]	lr: 1.399e-04, eta: 0:59:02, time: 1.194, data_time: 0.231, memory: 8946, loss_rpn_cls: 1.5238, loss_rpn_bbox: 0.1368, s0.loss_cls: 0.3735, s0.acc: 89.6973, s0.loss_bbox: 0.1987, s0.loss_mask: 0.3724, s1.loss_cls: 0.2338, s1.acc: 89.1628, s1.loss_bbox: 0.2287, s1.loss_mask: 0.1685, s2.loss_cls: 0.1461, s2.acc: 85.5179, s2.loss_bbox: 0.1441, s2.loss_mask: 0.0729, loss: 3.5991
2021-08-03 19:02:38,115 - mmdet - INFO - Epoch [1][6/24]	lr: 2.198e-04, eta: 0:43:00, time: 1.018, data_time: 0.088, memory: 8946, loss_rpn_cls: 1.0260, loss_rpn_bbox: 0.1367, s0.loss_cls: 0.3858, s0.acc: 88.2324, s0.loss_bbox: 0.2226, s0.loss_mask: 0.4073, s1.loss_cls: 0.2402, s1.acc: 87.1100, s1.loss_bbox: 0.2486, s1.loss_mask: 0.1798, s2.loss_cls: 0.1509, s2.acc: 85.5534, s2.loss_bbox: 0.1380, s2.loss_mask: 0.0836, loss: 3.2195
2021-08-03 19:02:40,252 - mmdet - INFO - Epoch [1][8/24]	lr: 2.997e-04, eta: 0:35:07, time: 1.069, data_time: 0.113, memory: 8946, loss_rpn_cls: 0.4961, loss_rpn_bbox: 0.1254, s0.loss_cls: 0.3180, s0.acc: 86.7676, s0.loss_bbox: 0.2192, s0.loss_mask: 0.4458, s1.loss_cls: 0.1816, s1.acc: 87.4589, s1.loss_bbox: 0.2869, s1.loss_mask: 0.2130, s2.loss_cls: 0.1284, s2.acc: 84.2714, s2.loss_bbox: 0.1585, s2.loss_mask: 0.0830, loss: 2.6558
2021-08-03 19:02:42,286 - mmdet - INFO - Epoch [1][10/24]	lr: 3.796e-04, eta: 0:30:15, time: 1.017, data_time: 0.100, memory: 8946, loss_rpn_cls: 0.1743, loss_rpn_bbox: 0.1079, s0.loss_cls: 0.3550, s0.acc: 85.8887, s0.loss_bbox: 0.2065, s0.loss_mask: 0.4016, s1.loss_cls: 0.1965, s1.acc: 84.4554, s1.loss_bbox: 0.2428, s1.loss_mask: 0.1860, s2.loss_cls: 0.1028, s2.acc: 83.5218, s2.loss_bbox: 0.1435, s2.loss_mask: 0.0912, loss: 2.2081
2021-08-03 19:02:44,381 - mmdet - INFO - Epoch [1][12/24]	lr: 4.596e-04, eta: 0:27:03, time: 1.046, data_time: 0.120, memory: 8946, loss_rpn_cls: 0.4304, loss_rpn_bbox: 0.1259, s0.loss_cls: 0.4373, s0.acc: 81.5918, s0.loss_bbox: 0.2164, s0.loss_mask: 0.3914, s1.loss_cls: 0.2132, s1.acc: 83.7788, s1.loss_bbox: 0.2603, s1.loss_mask: 0.1861, s2.loss_cls: 0.1298, s2.acc: 80.9405, s2.loss_bbox: 0.1393, s2.loss_mask: 0.0834, loss: 2.6135
2021-08-03 19:02:46,469 - mmdet - INFO - Epoch [1][14/24]	lr: 5.395e-04, eta: 0:24:45, time: 1.046, data_time: 0.126, memory: 8946, loss_rpn_cls: 0.3666, loss_rpn_bbox: 0.0767, s0.loss_cls: 0.3589, s0.acc: 84.6680, s0.loss_bbox: 0.1987, s0.loss_mask: 0.3528, s1.loss_cls: 0.1682, s1.acc: 85.8887, s1.loss_bbox: 0.2478, s1.loss_mask: 0.1644, s2.loss_cls: 0.0927, s2.acc: 84.2285, s2.loss_bbox: 0.1153, s2.loss_mask: 0.0738, loss: 2.2157
2021-08-03 19:02:48,485 - mmdet - INFO - Epoch [1][16/24]	lr: 6.194e-04, eta: 0:22:58, time: 1.008, data_time: 0.128, memory: 8946, loss_rpn_cls: 0.3807, loss_rpn_bbox: 0.0974, s0.loss_cls: 0.3312, s0.acc: 85.4004, s0.loss_bbox: 0.2158, s0.loss_mask: 0.3696, s1.loss_cls: 0.1777, s1.acc: 85.8398, s1.loss_bbox: 0.2245, s1.loss_mask: 0.1675, s2.loss_cls: 0.0989, s2.acc: 84.5703, s2.loss_bbox: 0.1229, s2.loss_mask: 0.0761, loss: 2.2623
2021-08-03 19:02:50,834 - mmdet - INFO - Epoch [1][18/24]	lr: 6.993e-04, eta: 0:21:46, time: 1.174, data_time: 0.149, memory: 8946, loss_rpn_cls: 0.3186, loss_rpn_bbox: 0.0876, s0.loss_cls: 0.2578, s0.acc: 89.0625, s0.loss_bbox: 0.1966, s0.loss_mask: 0.3425, s1.loss_cls: 0.1460, s1.acc: 88.2324, s1.loss_bbox: 0.2440, s1.loss_mask: 0.1636, s2.loss_cls: 0.0789, s2.acc: 87.0117, s2.loss_bbox: 0.1275, s2.loss_mask: 0.0773, loss: 2.0404
2021-08-03 19:02:52,835 - mmdet - INFO - Epoch [1][20/24]	lr: 7.792e-04, eta: 0:20:37, time: 0.995, data_time: 0.092, memory: 8946, loss_rpn_cls: 0.2497, loss_rpn_bbox: 0.0857, s0.loss_cls: 0.2346, s0.acc: 89.6484, s0.loss_bbox: 0.1876, s0.loss_mask: 0.3435, s1.loss_cls: 0.1309, s1.acc: 87.9395, s1.loss_bbox: 0.2001, s1.loss_mask: 0.1595, s2.loss_cls: 0.0729, s2.acc: 87.3047, s2.loss_bbox: 0.1069, s2.loss_mask: 0.0727, loss: 1.8443
2021-08-03 19:02:54,454 - mmdet - INFO - Epoch [1][22/24]	lr: 8.592e-04, eta: 0:19:29, time: 0.815, data_time: 0.116, memory: 8946, loss_rpn_cls: 0.2388, loss_rpn_bbox: 0.0833, s0.loss_cls: 0.2072, s0.acc: 90.2832, s0.loss_bbox: 0.1899, s0.loss_mask: 0.3517, s1.loss_cls: 0.1179, s1.acc: 90.4785, s1.loss_bbox: 0.1886, s1.loss_mask: 0.1661, s2.loss_cls: 0.0665, s2.acc: 89.3066, s2.loss_bbox: 0.1045, s2.loss_mask: 0.0734, loss: 1.7879
2021-08-03 19:02:56,056 - mmdet - INFO - Exp name: htc_hrnetv2p_w40_28e_coco_aug_pretrain.py
2021-08-03 19:02:56,056 - mmdet - INFO - Epoch [1][24/24]	lr: 9.391e-04, eta: 0:18:32, time: 0.801, data_time: 0.052, memory: 8946, loss_rpn_cls: 0.2927, loss_rpn_bbox: 0.1461, s0.loss_cls: 0.3246, s0.acc: 84.8145, s0.loss_bbox: 0.2005, s0.loss_mask: 0.3139, s1.loss_cls: 0.1781, s1.acc: 85.5184, s1.loss_bbox: 0.2163, s1.loss_mask: 0.1463, s2.loss_cls: 0.0942, s2.acc: 86.0357, s2.loss_bbox: 0.1177, s2.loss_mask: 0.0686, loss: 2.0989
2021-08-03 19:02:56,165 - mmdet - INFO - Saving checkpoint at 1 epochs
[                                                  ] 0/13, elapsed: 0s, ETA:[>>                                ] 1/13, 0.9 task/s, elapsed: 1s, ETA:    14s[>>>>>                             ] 2/13, 1.2 task/s, elapsed: 2s, ETA:     9s[>>>>>>>                           ] 3/13, 1.4 task/s, elapsed: 2s, ETA:     7s[>>>>>>>>>>                        ] 4/13, 1.6 task/s, elapsed: 3s, ETA:     6s[>>>>>>>>>>>>>                     ] 5/13, 1.7 task/s, elapsed: 3s, ETA:     5s[>>>>>>>>>>>>>>>                   ] 6/13, 1.8 task/s, elapsed: 3s, ETA:     4s[>>>>>>>>>>>>>>>>>>                ] 7/13, 2.0 task/s, elapsed: 4s, ETA:     3s[>>>>>>>>>>>>>>>>>>>>              ] 8/13, 2.1 task/s, elapsed: 4s, ETA:     2s[>>>>>>>>>>>>>>>>>>>>>>>           ] 9/13, 2.0 task/s, elapsed: 4s, ETA:     2s[>>>>>>>>>>>>>>>>>>>>>>>>>        ] 10/13, 2.1 task/s, elapsed: 5s, ETA:     1s[>>>>>>>>>>>>>>>>>>>>>>>>>>>      ] 11/13, 2.2 task/s, elapsed: 5s, ETA:     1s[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   ] 12/13, 2.2 task/s, elapsed: 5s, ETA:     0s[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] 13/13, 2.2 task/s, elapsed: 6s, ETA:     0s2021-08-03 19:03:04,797 - mmdet - INFO - Evaluating bbox...
2021-08-03 19:03:06,127 - mmdet - INFO - Evaluating segm...
2021-08-03 19:03:07,154 - mmdet - INFO - Exp name: htc_hrnetv2p_w40_28e_coco_aug_pretrain.py
2021-08-03 19:03:07,154 - mmdet - INFO - Epoch(val) [1][24]	bbox_mAP: 0.3620, bbox_mAP_30: 0.5930, bbox_mAP_50: 0.5440, bbox_mAP_75: 0.2510, bbox_mAP_s: 0.1920, bbox_mAP_m: 0.4520, bbox_mAP_l: 0.3100, bbox_mAP_copypaste: 0.362 0.593 0.544 0.251 0.192 0.452 0.310, segm_mAP: 0.3530, segm_mAP_30: 0.5950, segm_mAP_50: 0.5420, segm_mAP_75: 0.2350, segm_mAP_s: 0.1890, segm_mAP_m: 0.4380, segm_mAP_l: 0.3100, segm_mAP_copypaste: 0.353 0.595 0.542 0.235 0.189 0.438 0.310
Loading and preparing results...
DONE (t=0.02s)
creating index...
index created!
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=1.21s).
Accumulating evaluation results...
DONE (t=0.08s).
Average Precision  (AP) @[ IoU=0.30:0.95 | area=   all | maxDets=100 ] = 0.362
Average Precision  (AP) @[ IoU=0.30      | area=   all | maxDets=1000 ] = 0.593
Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.544
Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.251
Average Precision  (AP) @[ IoU=0.30:0.95 | area= small | maxDets=1000 ] = 0.192
Average Precision  (AP) @[ IoU=0.30:0.95 | area=medium | maxDets=1000 ] = 0.452
Average Precision  (AP) @[ IoU=0.30:0.95 | area= large | maxDets=1000 ] = 0.310
Average Recall     (AR) @[ IoU=0.30:0.95 | area=   all | maxDets=100 ] = 0.551
Average Recall     (AR) @[ IoU=0.30:0.95 | area=   all | maxDets=300 ] = 0.551
Average Recall     (AR) @[ IoU=0.30:0.95 | area=   all | maxDets=1000 ] = 0.551
Average Recall     (AR) @[ IoU=0.30:0.95 | area= small | maxDets=1000 ] = 0.459
Average Recall     (AR) @[ IoU=0.30:0.95 | area=medium | maxDets=1000 ] = 0.599
Average Recall     (AR) @[ IoU=0.30:0.95 | area= large | maxDets=1000 ] = 0.679
Loading and preparing results...
DONE (t=0.01s)
creating index...
index created!
Running per image evaluation...
Evaluate annotation type *segm*
DONE (t=0.98s).
Accumulating evaluation results...
DONE (t=0.04s).
Average Precision  (AP) @[ IoU=0.30:0.95 | area=   all | maxDets=100 ] = 0.353
Average Precision  (AP) @[ IoU=0.30      | area=   all | maxDets=1000 ] = 0.595
Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.542
Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.235
Average Precision  (AP) @[ IoU=0.30:0.95 | area= small | maxDets=1000 ] = 0.189
Average Precision  (AP) @[ IoU=0.30:0.95 | area=medium | maxDets=1000 ] = 0.438
Average Precision  (AP) @[ IoU=0.30:0.95 | area= large | maxDets=1000 ] = 0.310
Average Recall     (AR) @[ IoU=0.30:0.95 | area=   all | maxDets=100 ] = 0.535
Average Recall     (AR) @[ IoU=0.30:0.95 | area=   all | maxDets=300 ] = 0.535
Average Recall     (AR) @[ IoU=0.30:0.95 | area=   all | maxDets=1000 ] = 0.535
Average Recall     (AR) @[ IoU=0.30:0.95 | area= small | maxDets=1000 ] = 0.451
Average Recall     (AR) @[ IoU=0.30:0.95 | area=medium | maxDets=1000 ] = 0.578
Average Recall     (AR) @[ IoU=0.30:0.95 | area= large | maxDets=1000 ] = 0.679
Traceback (most recent call last):
  File "tools/train.py", line 188, in <module>
    main()
  File "tools/train.py", line 183, in main
    meta=meta)
  File "/projects/bw83/anley1/Swin-Transformer-Object-Detection/mmdet/apis/train.py", line 185, in train_detector
    runner.run(data_loaders, cfg.workflow)
  File "/projects/bw83/anley1/conda_envs/swinEnv/lib/python3.7/site-packages/mmcv/runner/epoch_based_runner.py", line 125, in run
    epoch_runner(data_loaders[i], **kwargs)
  File "/projects/bw83/anley1/conda_envs/swinEnv/lib/python3.7/site-packages/mmcv/runner/epoch_based_runner.py", line 50, in train
    self.run_iter(data_batch, train_mode=True)
  File "/projects/bw83/anley1/conda_envs/swinEnv/lib/python3.7/site-packages/mmcv/runner/epoch_based_runner.py", line 30, in run_iter
    **kwargs)
  File "/projects/bw83/anley1/conda_envs/swinEnv/lib/python3.7/site-packages/mmcv/parallel/data_parallel.py", line 67, in train_step
    return self.module.train_step(*inputs[0], **kwargs[0])
  File "/projects/bw83/anley1/Swin-Transformer-Object-Detection/mmdet/models/detectors/base.py", line 247, in train_step
    losses = self(**data)
  File "/projects/bw83/anley1/conda_envs/swinEnv/lib/python3.7/site-packages/torch/nn/modules/module.py", line 722, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/projects/bw83/anley1/conda_envs/swinEnv/lib/python3.7/site-packages/mmcv/runner/fp16_utils.py", line 84, in new_func
    return old_func(*args, **kwargs)
  File "/projects/bw83/anley1/Swin-Transformer-Object-Detection/mmdet/models/detectors/base.py", line 181, in forward
    return self.forward_train(img, img_metas, **kwargs)
  File "/projects/bw83/anley1/Swin-Transformer-Object-Detection/mmdet/models/detectors/two_stage.py", line 164, in forward_train
    **kwargs)
  File "/projects/bw83/anley1/Swin-Transformer-Object-Detection/mmdet/models/roi_heads/htc_roi_head.py", line 323, in forward_train
    semantic_feat)
  File "/projects/bw83/anley1/Swin-Transformer-Object-Detection/mmdet/models/roi_heads/htc_roi_head.py", line 153, in _mask_forward_train
    mask_feats, last_feat, return_logits=False)
  File "/projects/bw83/anley1/conda_envs/swinEnv/lib/python3.7/site-packages/torch/nn/modules/module.py", line 722, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/projects/bw83/anley1/Swin-Transformer-Object-Detection/mmdet/models/roi_heads/mask_heads/htc_mask_head.py", line 29, in forward
    res_feat = self.conv_res(res_feat)
  File "/projects/bw83/anley1/conda_envs/swinEnv/lib/python3.7/site-packages/torch/nn/modules/module.py", line 722, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/projects/bw83/anley1/conda_envs/swinEnv/lib/python3.7/site-packages/mmcv/cnn/bricks/conv_module.py", line 193, in forward
    x = self.conv(x)
  File "/projects/bw83/anley1/conda_envs/swinEnv/lib/python3.7/site-packages/torch/nn/modules/module.py", line 722, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/projects/bw83/anley1/conda_envs/swinEnv/lib/python3.7/site-packages/torch/nn/modules/conv.py", line 419, in forward
    return self._conv_forward(input, self.weight)
  File "/projects/bw83/anley1/conda_envs/swinEnv/lib/python3.7/site-packages/torch/nn/modules/conv.py", line 416, in _conv_forward
    self.padding, self.dilation, self.groups)
  File "/projects/bw83/anley1/conda_envs/swinEnv/lib/python3.7/site-packages/torch/utils/data/_utils/signal_handling.py", line 66, in handler
    _error_if_any_worker_fails()
RuntimeError: DataLoader worker (pid 6637) is killed by signal: Killed. 
slurmstepd: error: Detected 1 oom-kill event(s) in step 20221436.batch cgroup. Some of your processes may have been killed by the cgroup out-of-memory handler.
